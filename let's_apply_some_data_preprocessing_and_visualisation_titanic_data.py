# -*- coding: utf-8 -*-
"""Let's_apply_some_data_Preprocessing_and_visualisation_Titanic_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T5XlxtXarU3i-07a3o30W3MMnIWNmW2T

# 1. Preprocessing phase:
"""

#Importation des bibliothèques
import pandas as pd 
import numpy as np
#Importation de la base de données
dataframe=pd.read_csv('/content/titanic-passengers (2).csv',sep=";")

#Afficher le head
dataframe.head()

# Les informations générales et statistiques de la base de données
dataframe.info()
dataframe.describe()

#Nettoyage des données 
#Détection des valeurs manquantes
#####Le nombre de valeurs manquantes dans chaque colonne est comme dans le tableau 
dataframe.isna().sum()

# Comme la colonne Cabine contient un très grand nombre de valeurs manquante on la supprime
df=dataframe.drop('Cabin', axis=1)

#On remplace les valeurs manquantes de la colonne age par leur moyenne
df['Age'].fillna(df['Age'].mean(),inplace=True)

# On remplace les valeurs manquantes de la colonne Embarked par le mode
# On constate que le mode est S
df['Embarked'].value_counts()

df['Embarked'].fillna('S',inplace=True)

#Vérifier les états des colonnes, autrement dit s'il y'a des valeurs maquantes
df.isna().sum()

#Transformation des caractéristiques 

dict1={
    'Sex':{'male':0,'female':1}
}
df.replace(dict1,inplace=True)

dict2={
    'Survived':{'No':0,'Yes':1}
}
df.replace(dict2,inplace=True)
dict3={
    'Embarked':{'C':0, 'Q':1, 'S':2}
}
df.replace(dict3,inplace=True)

df.head()

# La selection des caractéristiques 
# Suppression de toutes les caractéristique qui n'influqncent pas le Target
df.drop( ['PassengerId','Name', 'Ticket'], axis=1,inplace=True)

df.head() 
# Les données sont maintenat prêtes à l'utilisation

"""# 2. Visualization phase:"""

#L'importation des bibliothèques de visualisation
import matplotlib.pyplot as plt
import seaborn as sns

#La visualisation des occurence des variables de la colonne 'Survived': 'No':0,'Yes':1
sns.countplot(x='Survived',data=df);
plt.xticks([0,1],['No', 'Yes']);

#La visualisation de la distribution de la colonne Age
sns.displot(data=df['Age'],bins=10, kde=True);

#La visualisation de l'occurence des variables de la caractéristique 'Sex':  'male':0,'female':1
sns.countplot(x='Sex',data=df);
plt.xticks([0,1],['male', 'female']);

#La visualisation de l'occurence des variables de la caractéristique 'Pclass' 
sns.countplot(x='Pclass',data=df);
plt.xticks([0,1,2],['1st', '2nd','3rd']);

##La visualisation de l'occurence des variables de la caractéristique 'Embarked':  'C':0, 'Q':1, 'S':2
sns.countplot(x='Embarked',data=df);
plt.xticks([0,1,2],['C', 'Q','S']);

# La visualisation de la corrélation entre sex, age et Survived
grid = sns.FacetGrid(df, col='Survived', row='Sex')
grid.map(plt.hist, 'Age', bins=10)
grid.add_legend();

#Visualisation de la corrélation entre Embarked et Pclass dans un graphique qui montre leur impact 
#sur la survie des individus.
sns.factorplot('Survived', hue="Pclass", col="Embarked", data=df, kind='count');

#Définir la fonction de corrélation 

def plot_correlation_map( df ):

    corr = df.corr()

    s , ax = plt.subplots( figsize =( 12 , 10 ) )

    cmap = sns.diverging_palette( 220 , 10 , as_cmap = True )

    s = sns.heatmap(

        corr, 

        cmap = cmap,

        square=True, 

        cbar_kws={ 'shrink' : .9 }, 

        ax=ax, 

        annot = True, 

        annot_kws = { 'fontsize' : 12 }

        )

#Lancer la fonction 
plot_correlation_map( df )

"""***What it does exactly and its utilities***

**Cette fonction donne un tracé qui représente graphiquement la matrice de corrélation(Tableau de contingence) qui donne le coefficient de corrélation linéaire entre toutes les caractéristiques de la trame de données donnée.**

**Ce graphique est utile pour identifier s'il existe une relation linéaire entre les différentes caractéristiques, et par conséquent faire un choix des caractéristiques qui impact la sortie.**

**À partir de la heatmap de corrélation ci-dessus, nous pouvons constater que :**


1.   les caractéristiques Survived et Sex ont une corrélation positive significative
2.   les fonctionnalités Fare et Pclass ont une corrélation négative significative
3. il y a plusieurs variables qui n'ont pas de corrélation et dont la valeur de corrélation est proche de 0
"""

#Using the groupby function combined with the mean() to view the relation between Pclass and survived 
df[["Pclass", "Survived"]].groupby(["Pclass"], as_index=True).mean()

#create a new feature 'Title ' from 'Name'
df['Title'] = dataframe.Name.str.extract('([A-Za-z]+)\.', expand=False)

df['Title'].value_counts()

grid = sns.FacetGrid(df, col='Sex')
grid.map(sns.countplot,'Title');
plt.xticks(rotation=45);

grid = sns.FacetGrid(df, col='Title')
grid.map(plt.hist, 'Age', bins=10)
grid.add_legend();

grid = sns.FacetGrid(df, col='Title')
grid.map(plt.hist, 'Fare', bins=5)
grid.add_legend();

#Let's try to group these titles into more useful ones
Title_Dictionary = {
            'Title':{
                     "Capt":  "Officer",
                     "Col":   "Officer",
                     "Major": "Officer",
                     "Dr":    "Officer",
                     "Rev":   "Officer",
                     "Jonkheer":"Royalty",
                     "Don":   "Royalty",
                     "Sir" :  "Royalty",
                     "Lady" : "Royalty",
                   "Countess":"Royalty",
                     "Dona":  "Royalty",
                      "Mme":  "Miss",
                     "Mlle":  "Miss",
                     "Miss":  "Miss",
                      "Ms":   "Mrs",
                     "Mr" :   "Mrs",
                     "Mrs" :  "Mrs",
                   "Master" :"Master"
                   }
                   }

dfnew=df.replace(Title_Dictionary)

#Let's verify
dfnew['Title'].value_counts()

grid = sns.FacetGrid(dfnew, col='Sex')
grid.map(sns.countplot,'Title');
grid.add_legend();

grid = sns.FacetGrid(dfnew, col='Title')
grid.map(plt.hist, 'Age', bins=10)
grid.add_legend();

grid = sns.FacetGrid(dfnew, col='Title')
grid.map(plt.hist, 'Fare', bins=5)
grid.add_legend();

#use the Parch and the SibSp columns to create a more useful feature, let's call it FamilySize.
#SibSp: int: Number of Siblings/Spouses Aboard
#SibSp : int : nombre de frères et sœurs/conjoints à bord
#Parch : int : nombre de parents/enfants à bord
#the family size=SibSp + Parch + 1(the passenger)
dfnew['family_size'] = dfnew['SibSp'] + dfnew['Parch'] + 1

dfnew.head()

dfnew[["family_size","Survived"]].groupby(["family_size"], as_index = False).mean()

sns.factorplot('family_size', hue='Survived', data=dfnew, kind='count');

"""**Nous concluons que la caractéristique -Taille de la famille- est utile car elle semble avoir un impact considérable sur la caractéristique Survived.**

**Nous pouvons voir que, dans les familles d'une personne (passagers qui étaient seuls et plus de 4 membres, il y avait plus de non survivants contrairement aux familles de 2, 3 et 4 membres.**
"""

